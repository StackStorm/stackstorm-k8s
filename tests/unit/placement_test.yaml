---
suite: Placement (NodeSelector Tolerations and Affinity)
templates:
  # primary template files
  - deployments.yaml
  - jobs.yaml

  # included templates must also be listed
  - configmaps_overrides.yaml
  - configmaps_packs.yaml
  - configmaps_rbac.yaml
  - configmaps_st2-conf.yaml
  - configmaps_st2-urls.yaml
  - configmaps_st2web.yaml
  - secrets_datastore_crypto_key.yaml
  - secrets_ssh.yaml
  - secrets_st2apikeys.yaml
  - secrets_st2auth.yaml
  - secrets_st2chatops.yaml

tests:
  - it: Deployments and Jobs have no default placement
    templates:
      - deployments.yaml
        # st2auth, st2api,
        # st2stream, st2web,
        # st2rulesengine, st2timersengine,
        # st2workflowengine, st2scheduler,
        # st2notifier, (1) st2sensorcontainer,
        # st2actionrunner, st2garbagecollector,
        # st2client, st2chatops
      - jobs.yaml
        # job-st2-apply-rbac-defintions
        # job-st2-apikey-load
        # job-st2-key-load
        # job-st2-register-content
        # job-st2canary-for-writable-packs-volumes
    set:
      st2:
        rbac: { enabled: true } # enable rbac job
        packs:
          sensors: [] # ensure only 1 sensor
          images: []
          volumes: &volumes_enabled
            enabled: true
            packs:
              nfs:
                server: "10.12.34.56"
                path: /var/nfsshare/packs
            virtualenvs:
              nfs:
                server: "10.12.34.56"
                path: /var/nfsshare/virtualenvs
            configs:
              nfs:
                server: "10.12.34.56"
                path: /var/nfsshare/configs
          configs: {} # has one core.yaml config file by default (dicts get merged)
      st2chatops:
        enabled: true
      jobs:
        extra_hooks: &jobs_extra_hooks
          - name: upgrade-warning
            hook: pre-upgrade, pre-rollback
            hook_weight: -5
            command: ["st2", "run", "--tail", "custom_pack.warn_about_upgrade"]
    asserts:
      - notExists:
          path: spec.template.spec.nodeSelector
      - notExists:
          path: spec.template.spec.tolerations
      - notExists:
          path: spec.template.spec.affinity

  - it: Deployments and Jobs accept custom placement
    templates:
      - deployments.yaml
        # st2auth, st2api,
        # st2stream, st2web,
        # st2rulesengine, st2timersengine,
        # st2workflowengine, st2scheduler,
        # st2notifier, (1) st2sensorcontainer,
        # st2actionrunner, st2garbagecollector,
        # st2client, st2chatops
      - jobs.yaml
        # job-st2-apply-rbac-defintions
        # job-st2-apikey-load
        # job-st2-key-load
        # job-st2-register-content
        # job-st2canary-for-writable-packs-volumes
    set:
      st2:
        rbac: { enabled: true } # enable rbac job
        packs:
          sensors: [] # ensure only 1 sensor
          images: []
          volumes: *volumes_enabled
      st2web:
        # these examples come from the k8s docs
        nodeSelector: &custom_nodeSelector
          disktype: ssd
        tolerations: &custom_tolerations
          - key: "key1"
            operator: "Equal"
            value: "value1"
            effect: "NoSchedule"
          - key: "key1"
            operator: "Equal"
            value: "value1"
            effect: "NoExecute"
        affinity: &custom_affinity
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: security
                  operator: In
                  values:
                  - S1
              topologyKey: topology.kubernetes.io/zone
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: security
                    operator: In
                    values:
                    - S2
                topologyKey: topology.kubernetes.io/zone
      st2auth:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2api:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2stream:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2rulesengine:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2timersengine:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2workflowengine:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2scheduler:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2notifier:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2actionrunner:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2sensorcontainer:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2garbagecollector:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2client:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      st2chatops:
        enabled: true
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
      jobs:
        nodeSelector: *custom_nodeSelector
        tolerations: *custom_tolerations
        affinity: *custom_affinity
        extra_hooks: *jobs_extra_hooks
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value: *custom_nodeSelector
      - equal:
          path: spec.template.spec.tolerations
          value: *custom_tolerations
      - equal:
          path: spec.template.spec.affinity
          value: *custom_affinity
