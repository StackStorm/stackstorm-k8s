version: 2.1

# Add additional CircleCI Orbs dependencies
orbs:
  # https://circleci.com/orbs/registry/orb/circleci/kubernetes
  kubernetes: circleci/kubernetes@1.3.1
  # https://circleci.com/orbs/registry/orb/circleci/helm
  helm: circleci/helm@1.1.1
  # https://circleci.com/orbs/registry/orb/ccpgames/minikube
  minikube: ccpgames/minikube@0.0.1

jobs:
  # Spin up minikube K8s cluster and run Helm chart & e2e tests on it
  e2e-minikube:
    parameters:
      minikube-version:
        type: string
    # 'large' 4 vCPUs & 15GB RAM CircleCI machine executor
    # required to deploy heavy 'stackstorm-ha' Helm release with RabbitMQ, MongoDB, Redis clusters and 25+ st2 Pods.
    # https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
    resource_class: large
    machine:
      # Available images https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2204:2022.04.1
    steps:
      - checkout
      - kubernetes/install
      - minikube/minikube-install:
          # https://github.com/kubernetes/minikube/releases
          version: << parameters.minikube-version >>
      - run:
          name: Install dependencies
          command: |
            sudo apt update || true
            # K8s 1.18 requires conntrack
            # See: https://github.com/kubernetes/minikube/issues/7179
            sudo apt install -y conntrack
      - run:
          name: Install Helm v3
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - run:
          name: Set up cri-dockerd
          command: |
            # https://github.com/Mirantis/cri-dockerd#build-and-install
            sudo -i
            # Run these commands as root
            ###Install GO###
            wget https://storage.googleapis.com/golang/getgo/installer_linux
            chmod +x ./installer_linux
            ./installer_linux
            source ~/.bash_profile

            cd cri-dockerd
            mkdir bin
            go build -o bin/cri-dockerd
            mkdir -p /usr/local/bin
            install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
            cp -a packaging/systemd/* /etc/systemd/system
            sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
            systemctl daemon-reload
            systemctl enable cri-docker.service
            systemctl enable --now cri-docker.socket
      - run:
          name: Create new K8s cluster
          command: sudo -E minikube start --vm-driver=none --container-runtime=docker
          environment:
            CHANGE_MINIKUBE_NONE_USER: true
      - run:
          name: Update stackstorm-ha chart dependencies
          command: helm dependency update
      - run:
          name: Helm install stackstorm-ha chart
          command: helm install --timeout 10m0s --debug --wait --name-template stackstorm-ha .
      - run:
          name: Helm test
          command: helm test stackstorm-ha
      - run:
          name: Helm upgrade with RBAC enabled
          command: helm upgrade --set st2.rbac.enabled=true --timeout 5m0s --debug --wait stackstorm-ha .
      - run:
          name: Helm test with RBAC enabled
          command: helm test stackstorm-ha
      - run:
          when: always
          name: Show created K8s resources
          command: kubectl get all

workflows:
  version: 2
  e2e:
    jobs:
      - e2e-minikube:
          matrix:
            parameters:
              minikube-version: # https://github.com/kubernetes/minikube/releases
                - v1.28.0
  # Run periodic nightly Helm tests to ensure there are no regressions
  e2e-nightly:
    jobs:
      - e2e-minikube:
          matrix:
            parameters:
              minikube-version: # https://github.com/kubernetes/minikube/releases
                - v1.28.0
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master

experimental:
  notify:
    branches:
      only:
        - master
